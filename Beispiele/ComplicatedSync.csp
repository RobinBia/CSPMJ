-- Complicated Synchronisation


MyInt = {0..99}
channel ch: MyInt.MyInt
channel out,out2: MyInt

T(x) = ch!x?y:{z|z<-MyInt, z<x} -> out!y -> T(y) [] ch!x?y:{z|z<-MyInt, z>=x} -> out2!y -> T(y)

S(x) = ch?y!x -> S(y)

MAIN =  T(1) [| {| ch |} |] S(2)

T1 = T(1)
S2 = S(2)


wire(P,A,Q) = (P [| A |] Q) \ A

wire1(A) = (T(1) [| A |] S(2)) \ A
wire1nh(A) = (T(1) [| A |] S(2))

TestWire0 = wire1({| ch |})

TestWire =
  wire(T(1), {| ch |}, T(2))
  
  
channel aout: {0..2}

negate(p)   = if p==0 then 1 else 0

AltBit(B) = out!B -> AltBit(negate(B))  {- currently this part is infinite state; think how to make it finite -}
AltB = AltBit(2)

Weird(W) = aout!1 -> W [] aout!2 -> Weird((W|||W))

W1 = Weird(W2)
channel a,b
W2 = a -> b -> STOP

MyBoolVal = true
MyBoolConj(aa,bb) = aa or bb

TestMyBoolVal = if MyBoolVal then aout!1 ->STOP else aout!2 ->STOP
TestMyBoolConj = if MyBoolConj(false,MyBoolVal) then aout!1 ->STOP else aout!2 ->STOP
TestMyBoolConj2 = if MyBoolConj(false,not(MyBoolVal)) then aout!1 ->STOP else aout!2 ->STOP

-- Trace Check Generated by ProB:
PROB_TEST_TRACE = ch.1.2 -> out2.2 -> ch.2.1 -> out.1 -> ch.1.2 -> out2.2 -> ch.2.1 -> out.1 -> ch.1.2 -> STOP

assert MAIN [T= PROB_TEST_TRACE


