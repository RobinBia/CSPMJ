/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * A Parser for CSP in JAVA                           		  *
 * CSPMJ V0.1.1606XX										  *
 *															  *
 * robin.bially@hhu.de		                                  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

//Fehlt: Mapping Funktionen
Package CSPMparser;
Helpers

	all = [0 .. 0xFFFF];
	dangle_l = 0x00AB;
	dangle_r = 0x00BB;
	char = [all- ['''+'"']];
	digits = ['0' .. '9'];
	first_digit = [digits - '0'];
	highc = ['A' .. 'Z'];
	lowc = ['a' .. 'z'];
	letter = (highc | lowc | '_');
	letter_digits = (letter|digits);	
    tab = 9;
    cr = 13;
    lf = 10;
	not_cr_lf = [all - [cr + lf]];	
	eol = cr lf | cr | lf;
	blank = (' '|tab);
	white = (' '|tab|cr|lf)*;
	
/*	Triangle substitutions:
	\u00AB = «	seq opening
	\u00BB = »	seq closing
	\u00A3 = £	greater
	\u20AC = €  smaller
*/
	seq_open	=	0x00AB;
	seq_close	=	0x00BB;
	greater 	=	0x00A3;
	less		=	0x20AC;

Tokens
//***************************************************************************************	
//Predefined functions and constants
	stop 			= 'STOP';
	skip 			= 'SKIP';
	chaos 			= 'CHAOS';
	div				= 'DIV';
	wait 			= 'WAIT';
	run				= 'RUN';
	member 			= 'member';
	elem 			= 'elem';
	empty 			= 'empty';
	null 			= 'null';
	bool_const		= 'Bool';
	bool_func		= 'bool';
	diff 			= 'diff';
	card 			= 'card';
	events 			= 'Events';
	head 			= 'head';
	tail 			= 'tail';
	concat 			= 'concat';
	union1 			= 'union';
	union2 			= 'Union';
	inter1			= 'inter';
	inter2 			= 'Inter';
	set1 			= 'set';
	set2 			= 'Set';
	seq1 			= 'seq';
	seq2			= 'Seq';
	length 			= 'length';
	proc 			= 'Proc';
	char_const		= 'Char'; 
	int_const 		= 'Int';
	error			= 'error';
	show			= 'show';
	true1			= 'true';
	false1			= 'false';
	true2			= 'True';
	false2			= 'False';
//***************************************************************************************
//CSPM command words
	ltl				= 'LTL';
	ctl				= 'CTL';	
	if 				= 'if';
	then 			= white 'then' white;
	else 			= white 'else' white;
	let 			= 'let';
	within 			= 'within' white;
	d_type 			= 'datatype';
	s_type 			= 'subtype';
	n_type 			= 'nametype';
	channel 		= 'channel';
	transparent 	= 'transparent';
	external		= 'external';
	assert 			= 'assert';
	include 		= 'include';
	print 			= 'print';
	dl_free 		= 'deadlock free';
	div_free 		= 'divergence free';
	det 			= 'deterministic';
	live_free 		= 'livelock free';
	has_trace 		= 'has trace';
	timed 			= 'Timed';
	mod_defs		= 'module';	
	exports			= 'exports';
	endmodule		= 'endmodule';
	and 			= 'and';
	or 				= 'or';
	not 			= 'not';

//---------------------------------------------------------------------------------------
	comma 			= ',' white;
	apo 			= ''';
	quote			= '"';
	dotdot 			= white '..' white;
	ddot 			= white ':' white;
	eq 				= '=' white;
	at 				= '@' white;
	hash 			= '#' white;
	b_slash 		= white '\' white;
	q_mark 			= '?';
	excl_mark 		= '!';
	dollar 			= '$';
	dpipe 			= white '||' white;
	pipe_equals		= white '|=' white; 
	pipe 			= white '|' white;
	doubleat 		= white '@@' white;
	i_leaving 		= white '|||' white;
	i_choice  		= white '|~|' white;
	e_choice  		= white '[]' white;
	interrupt 		= white '/\' white;
	timeout			= white '[>' white;
//-------------------------------------	
	par_l 			= '(' white;
	par_r 			=  white ')';
	empty_map 		= '(| |)';
	lge 			= white '<=' white | white '>=' white;
	seq_open		= seq_open white;
	seq_close 		= white seq_close;
	greater 		= white greater;
	less	 		= less white;		
	tria_l			= '<' white;
	tria_r			= white '>';
	sync_par_l		= '[+' white;	
	sync_par_r		= white '+]';
	sync_int_l 		= '/+' white;
	sync_int_r		= white '+\';
	dbracket_l 		= white '[[' white;
	dbracket_r 		= white ']]';
	dp_bracket 		= white ':[' white;
	bracket_pipe_l	= white '[|' white;
	bracket_pipe_r	= white '|]' white;
	bracket_l 		= white '[' white;
	bracket_r 		= white ']';
	brace_l 		= '{' white;
	brace_r 		= white '}';
//-------------------------------------	
	guard 			= white '&' white;
	dot 			= white '.' white;
	semicolon 		= white ';' white;
	prefix			= white '->' white;
	arrow_l 		= '<-';
	cat 			= white '^' white;
	d_arr 			= '<->';	
	equi 			= '<=>';
	imp_r 			= '=>';
	imp_l 			= '<=';
	equal			= white '==' white | white '!=' white;
	tra_mod 		= white '[T=' white;
	fail_mod  		= white '[F=' white;
	fail_div 		= white '[FD=' white;
	t_mod 			= white '[T]' white;
	f_mod		    = white '[F]' white; 
	f_div		    = white '[FD]' white;
	mul_div_mod 	= white '*' white | white '/' white | white '%' white;
	plus 			= white '+' white;
	minus		    = '-';
	wildcard 		= '_';
//---------------------------------------------------------------------------------------	
	/*Strings*/ 
	number 			= '0' | first_digit digits*;
	identifier 		= letter letter_digits* '''*;
	nl				= eol;
	string			= '"' char* '"';
	char			= ''' char ''';
	blank			= blank*;

	
Ignored Tokens
	blank;

Productions
defs 		 =	 {many_lines} def_nl+ def_no_nl?
				|{one_line} def_no_nl;
def_nl 		 =	 def? nl;
def_no_nl 	 =	 def;
def			 =	 {expression} expression 
				|{include_file} include_file
				|{d_type_s_type} types
				|{n_type} ntype
				|{channel} chan
				|{assertion} assertion
				|{print} print_exp
				|{timed_section} time
				|{module} module
				|{trans} transparent id
				|{ext} external id;		
//---------------------------------------------------------------------------------------
types			= {dtype} d_type typedef |{stype} s_type typedef;
typedef 		= id eq clause typedef_rek*;
clause  		= [clause_name]:id dotted?;
dotted  		= dot type_exp;
typedef_rek 	= pipe clause;

ntype 			= n_type id eq type_exp;	  
//---------------------------------------------------------------------------------------
/*Creation of Channels*/
chan 		= channel id chan_rek?;
chan_rek 	= {rek} comma id chan_rek? | {end} ddot type_exp;
//---------------------------------------------------------------------------------------			
type_exp 		=  	 {dotted} type_exp dot type_exp1
					|{par} type_exp1;
type_exp1 		= 	 {par} par_l type_exp type_exps* par_r 
					|{set_type} type_exp2;
type_exp2 		=  	 {set} set
					|{set_name} id tuple?;
type_exps  		= 	 comma type_exp;

//---------------------------------------------------------------------------------------
//Create a function or an identifier
	 
id 		=	 {id} identifier |{ltl} ltl |{ctl} ctl |{stop} stop |{skip} skip 
			|{chaos} chaos |{div} div |{wait} wait |{run} run |{member} member 
			|{empty} empty |{null} null |{bool_const} bool_const |{bool_func} bool_func
			|{union1} union1 |{inter1} inter1 |{diff} diff |{union2} union2 		
			|{inter2} inter2 |{card} card |{events} events |{set2} set2 
			|{head} head |{tail} tail |{concat} concat |{set1} set1 
			|{seq1} seq1 |{length} length |{proc} proc |{char_const} char_const 
			|{error} error |{show} show |{int_const} int_const
			|{seq2} seq2 | {elem} elem;
			
//---------------------------------------------------------------------------------------
parameters 	  =	par_l pattern_list par_r;
//---------------------------------------------------------------------------------------
pattern_list  =  {plist} pattern_list comma pattern1 | {p1} pattern1;
pattern1      =  {double_pattern} pattern1 doubleat pattern2 |{p2} pattern2;
pattern2 	  =  {dot_pattern} pattern2 dot pattern3 |{p3} pattern3;
pattern3	  =  {restricted} pattern4 ddot bool_exp
				|{p4} pattern4;
pattern4	  = {concat_pattern} pattern4 cat pattern_atom |{pat_atom} pattern_atom;
pattern_atom  =  {set} set_pattern
				|{list} list_pattern
				|{par} par_pattern
				|{tuple} tuple_pattern
				|{wildcard} wildcard
				|{var} id
				|{string} string
				|{char} char
				|{number} number
				|{true} true2
				|{false} false2;
				
set_pattern	  	 =  {empty} brace_l brace_r
				   |{element} brace_l pattern1 brace_r;
				
list_pattern  	 =   {list} seq_open pattern1 list_pattern_rek* seq_close
					|{empty_list} seq_open seq_close;
list_pattern_rek =   comma pattern1;

par_pattern	  = par_l pattern1 par_r;

tuple_pattern = par_l pattern1 list_pattern_rek+ par_r;

//---------------------------------------------------------------------------------------
/*Creation of Expressions*/	

expression  =	 {new_def} id parameters eq proc1
				|{pattern} pattern1 eq proc1;

proc1 		=  	 {hide} proc1 b_slash proc2 
				|{p2} proc2;
proc2 		=    {ileave} proc2 i_leaving proc3 
				|{p3} proc3;
proc3 		=  	 {except} proc3 bracket_pipe_l event [r]:pipe tria_r proc4
				|{gen_par} proc3 bracket_pipe_l event bracket_pipe_r proc4
				|{alph_par} proc3 bracket_l [l]:event dpipe [r]:event bracket_r proc4
				|{linked_par} proc3 bracket_l link_comp bracket_r proc4
				|{p4} proc4;				
proc4 		=  	 {int_choice} proc4 i_choice proc5 
				|{p5} proc5;
proc5 		=  	 {ext_choice} proc5 e_choice proc6
				|{sync_ext} proc5 sync_par_l event sync_par_r proc6
				|{p6} proc6;
proc6 		= 	 {interrupt} proc6 interrupt proc7
				|{sync_interrupt} proc6 sync_int_l event sync_int_r proc7
				|{p7} proc7;
proc7 		= 	 {sliding_choice} proc7 timeout proc8 
				|{p8} proc8;
proc8 		= 	 {seq_comp} proc8 semicolon proc9
				|{p9} proc9; 
proc9		= 	 {guard_exp} dot_op guard proc9
				|{prefix} event prefix proc9
				|{lambda_term} b_slash pattern_list at proc9
				|{let_within} let defs within proc9
				|{if_else} if bool_exp then proc1 else proc9
				|{rep} rep proc9
				|{p10} proc10;				
proc10 		=	 {renaming} proc10 dbracket_l rename_comp dbracket_r
				|{e_renaming} proc10 dbracket_l dbracket_r
				|{event} event;
			
event 		= 	 {event} dot_op field1* field2*;			
field1 		= 	 {nondet_rest} dollar pattern1;
field2		=	 {input_rest} q_mark pattern1
				|{output} excl_mark dot_op;

dpattern 	=    {dpattern} dpattern doubleat dot_op
				|{dotop} dot_op;
dot_op 		=	 {dot} dot_op dot bool_exp
				|{ss} bool_exp;				
				
bool_exp 	= 	 {or} bool_exp or bool_exp2 
				|{bool_exp2} bool_exp2;
bool_exp2 	= 	 {and} bool_exp2 and bool_exp3 
				|{bool_exp3} bool_exp3; 		
bool_exp3 	= 	 {not} not bool_exp3 
				|{bool_exp4} bool_exp4;
bool_exp4 	= 	 {equal} bool_exp4 equal val_exp
				|{ordering_lge} bool_exp4 lge val_exp
				|{ordering_less} bool_exp4 less val_exp 
				|{ordering_greater} bool_exp4 greater val_exp 
				|{val_exp} val_exp;				
val_exp 	= 	 {addition} val_exp plus val_exp1 
				|{subtraction} val_exp minus val_exp1
				|{val_exp1} val_exp1; 			  			
val_exp1 	= 	 {multiplication} val_exp1 mul_div_mod val_exp2 
				|{val_exp2} val_exp2;
val_exp2 	= 	 {un_minus} minus val_exp2 
				|{sequence0} sequence0;		
sequence0	= 	 {len} hash sequence0 | {sequence1} sequence1;
sequence1 	=	 {cat} sequence1 cat atom | {atom} atom;
atom 		= 	 {num} number
				|{sequence} sequence
				|{string} string
				|{char} char
				|{set} set
				|{wildcard} wildcard
				|{map} map
				|{true1} true1
				|{false1} false1
				|{true2} true2
				|{false2} false2
				|{tuple} [tuple]:tuple [lambda]:tuple?
				|{id} id tuple?;
//---------------------------------------------------------------------------------------
/*(e1,e2,...,en) different types possible*/
tuple 	 		=  {tuple} par_l arguments par_r;
//---------------------------------------------------------------------------------------
// e1,e2,...,en    all of type a!
arguments		= 	arguments_rek;
arguments_rek	=  {arg_start} proc1 comma arguments_rek
				  |{arg_end} proc1;
//---------------------------------------------------------------------------------------
link_comp 			= [le]:event d_arr [re]:event link_comp_rek* add_stmts?;
link_comp_rek 		= comma [le]:event d_arr [re]:event;
		
rename_comp			= [le]:event arrow_l [re]:event rename_comp_rek* add_stmts?;
rename_comp_rek 	= comma [le]:event arrow_l [re]:event;

add_stmts		= pipe stmts;
//---------------------------------------------------------------------------------------	
sequence =	 {empty_seq} seq_open seq_close
			|{expl_seq} seq_open arguments seq_close
			|{list_comp} seq_open arguments pipe stmts seq_close
			|{cr_seq} seq_open [l]:val_exp dotdot [r]:val_exp seq_close
			|{ran_comp} seq_open [l]:val_exp dotdot [r]:val_exp pipe stmts seq_close
			|{or_seq} seq_open val_exp dotdot seq_close
			|{inf_compr} seq_open val_exp dotdot pipe stmts seq_close
			|{enum_seq} enum_seq
			|{seq_comp}	seq_comp;
					  
enum_seq 	  		=  tria_l [l]:pipe arguments [r]:pipe tria_r;
seq_comp  			=  tria_l [l]:pipe arguments [m]:pipe stmts [r]:pipe tria_r;
				 
//---------------------------------------------------------------------------------------				 
/*Examples: {v,w,x,y,z}, {m..n}, {m..},{x*2..64|x<-{8,4}}*/
set = 	{empty_set} brace_l brace_r
		|{set} brace_l arguments brace_r
		|{closed_range} brace_l [l]:val_exp dotdot [r]:val_exp brace_r
		|{open_range} brace_l val_exp dotdot brace_r
		|{set_comprehension} brace_l arguments pipe stmts brace_r
		|{ranged_comprehension} brace_l [l]:val_exp dotdot [r]:val_exp pipe stmts brace_r
		|{infinite_comprehension} brace_l val_exp dotdot pipe stmts brace_r
		|{enum_set} enum_set
		|{set_comp} set_comp;
	
enum_set   	    =  brace_l [l]:pipe arguments [r]:pipe brace_r;
set_comp		=  brace_l [l]:pipe arguments [m]:pipe stmts [r]:pipe brace_r;
//---------------------------------------------------------------------------------------
map	 =	  {map} par_l [lp]:pipe[le]:bool_exp imp_r [re]:bool_exp [rp]:pipe par_r
		  |{emptymap} empty_map;
//---------------------------------------------------------------------------------------		 	 
//ACHTUNG SET STATEMENTS -> identifier : {}
rep = 			 {ext_choice} e_choice stmts at
				|{int_choice} i_choice stmts at
				|{i_leave} i_leaving stmts at
				|{seq_comp} semicolon stmts at
				|{alp_par} dpipe stmts at bracket_l event bracket_r
				|{sharing} bracket_pipe_l val_exp bracket_pipe_r stmts at
				|{linked_par} bracket_l link_comp bracket_r stmts at
				|{sync_par} sync_par_l [l]:event sync_par_r stmts at;
//---------------------------------------------------------------------------------------
//Statements

stmts 					=  {gen} generator stmts_rek* 
						  |{pred} predicate stmts_rek*;
stmts_rek 				=  {gen} comma generator | {pred} comma predicate;
generator				=  dpattern generator_op proc1;
predicate				=  bool_exp;

generator_op			=  {arrow} arrow_l |{ddot} ddot;
//---------------------------------------------------------------------------------------	
assertion = 	 {tra_mod} assert [l]:proc1 tra_mod [r]:proc1
				|{fm} assert [l]:proc1 fail_mod [r]:proc1
				|{fd} assert [l]:proc1 fail_div [r]:proc1
				|{ltl} assert proc1 pipe_equals ltl ddot string
				|{ctl} assert proc1 pipe_equals ctl ddot string
				|{dl_free} assertion_dl
				|{div_free} assertion_div
				|{det} assertion_det
				|{live_free} assertion_ll
				|{has_trace} assertion_ht
				|{negated_assertion} not assertion;

			
assertion_dl =  	  {dl_main} assert proc1 dp_bracket dl_free bracket_r
					 |{fm} assert proc1 dp_bracket dl_free f_mod bracket_r
					 |{fd} assert proc1 dp_bracket dl_free f_div bracket_r;
					 
assertion_div =  	 {div_main} assert proc1 dp_bracket div_free bracket_r
					|{fd} assert proc1 dp_bracket div_free f_div bracket_r;
					 
assertion_det = 	 {det_main} assert proc1 dp_bracket det bracket_r
					|{fm} assert proc1 dp_bracket det f_mod bracket_r
					|{fd} assert proc1 dp_bracket det f_div bracket_r;
							
assertion_ll = 		assert proc1 dp_bracket live_free bracket_r;

assertion_ht = 	{trace_main} assert proc1 dp_bracket has_trace bracket_r [r]:ddot val_exp
				|{tra_mod} assert proc1 dp_bracket has_trace t_mod bracket_r [r]:ddot val_exp
				|{fm} assert proc1 dp_bracket has_trace f_mod bracket_r [r]:ddot val_exp
				|{fd} assert proc1 dp_bracket has_trace f_div bracket_r [r]:ddot val_exp;
	
//---------------------------------------------------------------------------------------	
print_exp 	= 	 {pe} print proc1;
//---------------------------------------------------------------------------------------
time =  timed par_l proc1 par_r brace_l defs brace_r;
//---------------------------------------------------------------------------------------
module = mod_defs id [ls]:defs exports [rs]:defs endmodule;
//---------------------------------------------------------------------------------------
/*Include File if path is valid*/
include_file = include string;	
