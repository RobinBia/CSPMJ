/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ivo' at '6/23/16 1:18 PM' with Gradle 2.10
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

// for getting platform details
import org.apache.tools.ant.taskdefs.condition.Os

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    sablecc
}

dependencies {
    sablecc(group: 'de.hhu.stups', name: 'sablecc', version: '3.2.10')
//    compile 'com.google.code.findbugs:jsr305:1.3.9'
    testCompile group: 'junit', name: 'junit', version: '4.+'
//    prologlib(group: 'de.hhu.stups', name: 'prologlib', version: '2.4.40')
//    compile "de.hhu.stups:prologlib:2.4.40"
//    testCompile 'de.hhu.stups:prologlib:2.4.40'
}

sourceSets {
    main {
        java {
          srcDirs = ['build/temp','src/main/java', 'src/performance/java']
        }
    }
}

def download(address,target) {
    if (!file("$target").exists()) {
        def file = new FileOutputStream(target)
        def out = new BufferedOutputStream(file)
        out << new URL(address).openStream()
        out.close()
    }
}


task downloadCSPMFrontend << {
    def platform =  System.getProperty('os.name').toLowerCase()
    def arch = System.getProperty('os.arch').toLowerCase()

    def libName = 'cspmf'
    def osPref = ''
    def archPref = ''
    
    if (platform.contains('mac')) {
        osPref += 'darwin-'
    } else if (platform.contains('linux')) {
        osPref += 'linux-'
    } else {
        osPref += 'windows'
        libName += '.exe'
    }

    if(arch.contains('64')) {
        archPref += '64'
    } else {
        archPref += '32'
    }

    if(platform.contains('windows')) {
        download('https://www3.hhu.de/stups/downloads/cspmf/'+osPref+'/'+libName,'build/classes/main/' + libName)
    } else {
        download('https://www3.hhu.de/stups/downloads/cspmf/'+osPref+archPref+'/'+libName,'build/classes/main/' + libName)        
    }
}

task genLtlParser(type:JavaExec) {
    doFirst{ file('build/temp').mkdirs() }
    inputs.dir new File('src/main/resources/grammars')
    outputs.dir new File('build/temp')
    main = 'org.sablecc.sablecc.SableCC'
    classpath = configurations.sablecc
    maxHeapSize = '1024m'
    args = ['-d','build/temp','src/main/resources/LtlParser.scc']
}

task genCtlParser(type:JavaExec) {
    doFirst{ file('build/temp').mkdirs() }
    inputs.dir new File('src/main/resources/grammars')
    outputs.dir new File('build/temp')
    main = 'org.sablecc.sablecc.SableCC'
    classpath = configurations.sablecc
    maxHeapSize = '1024m'
    args = ['-d','build/temp','src/main/resources/CtlParser.scc']
}

task genCSPMparser(type:JavaExec) {
    doFirst{ file('build/temp').mkdirs() }
    inputs.dir new File('src/main/resources/grammars')
    outputs.dir new File('build/temp')
    main = 'org.sablecc.sablecc.SableCC'
    classpath = configurations.sablecc
    maxHeapSize = '1024m'
    args = ['-d','build/temp','src/main/resources/CSPMparser.scc']
    //args = ['-d','build/temp','src/main/resources/MiniParserAST.scc']
}

jar {
    baseName = 'cspmj'
    from 'bin'
    include '**/*.class'
    include '**.*.class'
    exclude '**.*.scc' 
    from 'build/temp'
    include '**/*.dat'
    from sourceSets.main.toString()
    include '**/*.java'
    manifest { attributes 'Main-Class': 'CSPMparser' }
}

compileJava {
 dependsOn = ['genLtlParser','genCtlParser','genCSPMparser', 'downloadCSPMFrontend']
}

sourceSets.test.runtimeClasspath += files(sourceSets.main.java.srcDirs)
