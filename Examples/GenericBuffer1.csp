
MyIntL = {0..999} -- for FDR
MyInt = {0..9} -- for FDR

datatype FRUIT = apples | oranges | pears

channel left,right,mid: FRUIT
channel ack


FRUITGEN(ch) = ch!apples -> ch!oranges -> ch!pears -> FRUITGEN(ch)

BUFF(in,out) = in?x -> out!x -> BUFF(in,out)


SYSTEM = BUFF(left,right) [| {| left |} |] FRUITGEN(left)
MAIN = Testiii ; TestNrGen2 ; SYSTEM

channel ii,oo,tt: MyInt.MyInt

NRGEN(ch) = ch!1!1 -> ch!2!4 -> ch!3!6 -> NRGEN(ch)
NRGENFinite(ch) = ch!1!1 -> ch!2!4 -> ch!3!6 -> SKIP

TEST =  BUFF(ii,oo) [| {| ii |} |] NRGEN(ii)

NRGENii = ii!1!1 -> ii!2!4 -> ii!3!6 -> NRGENii

MYCHANNEL = ii
TestNrGen = NRGEN(MYCHANNEL)
MyChannel(x) = if x>0 then ii else oo
TestNrGen2 = NRGENFinite(MyChannel(1))  {- test whether functions can return channels and be passed to processes -}


BUFFii = ii?x -> oo!x -> tt!x -> BUFFii
TESTii =  BUFFii [| {| ii |} |] NRGENii

-- Now test whether we can pass channels with partial lists to other processes
channel iii,ooo:MyIntL.MyInt.MyInt
Testiii = NRGENFinite(iii.999) [| {| iii |} |] iii?z1 -> iii?z2 -> iii?z3 -> Outooo(z1,z2,z3)

Outooo(x,y,z) = ooo!x -> ooo!y -> ooo!z -> SKIP  {- test if tuples can be passed as parameters and then output -}


-- Trace Check Generated by ProB:  (takes long to check with FDR !)
PROB_TEST_TRACE = iii.999.1.1 -> iii.999.2.4 -> iii.999.3.6 -> ooo.999.1.1 -> ooo.999.2.4 -> ooo.999.3.6 -> ii.1.1 -> ii.2.4 -> ii.3.6 -> left.apples -> right.apples -> left.oranges -> right.oranges -> left.pears -> right.pears -> left.apples -> right.apples -> left.oranges -> right.oranges -> STOP

assert MAIN [T= PROB_TEST_TRACE

