-- LetTest

channel out,in:{0..999}

PROC(x) = let fun(n) = n+x 
          within
             out!fun(2) -> SKIP
             

TestChannelIn(n) = out?x -> (let fun(m) = m+n+x within out!fun(x) -> SKIP)
TestIn = TestChannelIn(10) [| {|out|} |] out!3 -> out?z -> SKIP   {- does work -}
TestRIn = Repeat(TestChannelIn(10)) [| {|out|} |]
          out!3 -> out?z -> out!5 -> out?z2 -> SKIP   {- does work -}
TestRRIn = Repeat(TestChannelIn(10)) [| {|out|} |]
           Repeat(out!3 -> out?z -> out!5 -> out?z2 -> SKIP)   {- does work now -}


Repeat(X) = (X ; Repeat(X))

RTest1 = Repeat(out!1->out!0->SKIP)

C3 = Cube(3)
RepC3 = RepCube(3) {- does work ! -}
RepC32 = Repeat(Cube(3))

MAIN = (PROC(2) ||| PROC(3)) ; SYSTEM


RepCube(x) = Repeat(out!x -> (let fun(m) = m*x  within out!fun(x*x) -> SKIP))
Cube(x) = out!x -> (let fun(m) = m*x  within out!fun(x*x) -> SKIP)


RepCubeIn = Repeat(in?x -> (let fun(m) = m*x  within out!fun(x*x) -> SKIP))  {- THIS IS longer PROBLEMATIC !!! -}

RepCubeIn2 = Repeat(in?x -> (let fun(m) = m*m*m  within out!fun(x) -> SKIP)) 

SYSTEM = RepCubeIn [| {| in |} |] in!2 -> in!3 -> SKIP


RepIn2 = Repeat(in?x -> out!x -> SKIP)
SYSTEM2 = RepIn2 [| {| in |} |] in!2 -> in!3 -> SKIP   {- This does now work with ProB -}

-- Trace Check Generated by ProB:
PROB_TEST_TRACE = out.4 -> out.5 -> in.2 -> out.8 -> in.3 -> out.27 -> STOP


assert MAIN [T= PROB_TEST_TRACE --fails with
{-
Field is not compatible with protocol
while processing communication !fun(x*x) on channel out
near line 33 of LetTests.csp
-}