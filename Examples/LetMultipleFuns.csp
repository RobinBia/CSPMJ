channel out: { -1 .. 216 } --  gives Lex Error: {-1 .. 200}

TEST_MULTIPLE_FUNS(x)  = 
       let
           f(y) = x*y
           g(z) = f(z)+f(x)
       within
           out!f(1) -> out!f(x) -> out!g(1) -> out!g(x) -> SKIP
 
TEST_MUL = TEST_MULTIPLE_FUNS(3) ; TEST_MULTIPLE_FUNS(4)

TEST_MULTIPLE_FUNS_INV_ORDER(x)  = 
       let
           g(z) = f(z)+f(x)  {- f used before defined -}
           f(y) = x*y
       within
           out!f(1) -> out!f(x) -> out!g(1) -> out!g(x) -> SKIP
TEST_MUL_INV = TEST_MULTIPLE_FUNS_INV_ORDER(3) ; TEST_MULTIPLE_FUNS_INV_ORDER(4)

TEST_MultipleEq(x,y,z) =
       let
           f(0) = 1
           f(1) = (x+y+z)
           f(a) = (x+y+z)*f(a-1)
           g(v) = if v<x then -1 else if v<y then 11 else if v<z then 22 else 33
       within
           out!f(1) -> out!f(2) -> out!f(3) -> out!g(0) -> out!g(2) -> out!g(10) -> SKIP

TEST_MultipleEq123 = TEST_MultipleEq(1,2,3)

MAIN = TEST_MUL ; TEST_MUL_INV; Test_nested1; Test_nested_3; TEST_MultipleEq123


Test_nested_lets(x,y) =  let
                            f(0) = 1
                            f(1) = 2
                            f(n) = 1+f(n-1)
                         within
                            out!f(x+y) -> 
                              let f(n) = 2*n within 
                                  out!f(x+y) -> SKIP  {- here the inner f should be used -}
Test_nested1 = Test_nested_lets(2,3)


Test_nested_2(x,y) = 
   let  f(0) = 100
        f(1) = 200
        f(n) =  let g(z) = (x*y + z) % n within  g(1)+g(2)+g(5)
   within
       out!f(1) -> out!f(3) -> out!f(x) -> out!f(100) -> SKIP
Test_nested_3 = Test_nested_2(2,5)  -- ProBE does not animate this (empty window)

-- TESTTT = let f = 5 within out!f -> STOP  {- generates parse exception as f used in different ways -}


-- Trace Check Generated by ProB:
PROB_TEST_TRACE = out.3 -> out.9 -> out.12 -> out.18 -> out.4 -> out.16 -> out.20 -> out.32 -> out.3 -> out.9 -> out.12 -> out.18 -> out.4 -> out.16 -> out.20 -> out.32 -> out.6 -> out.10 -> out.200 -> out.2 -> out.2 -> out.38 -> out.6 -> out.36 -> out.216 -> out.-1 -> out.22 -> out.33 -> SKIP ; STOP

assert MAIN [T= PROB_TEST_TRACE