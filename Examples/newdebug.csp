--x = 1+2
--y = -2
--z = 5<=3
--z = 5>=4
--z = 5>4
--a = 5<3
--c = 5==5
--c = 5!=5
--c = ((3,(2))) == (((3),(2)))
--d = True and (False)
--e = diff({3},{5})
--g = Union({{True}})
--f = card({True})
--g = null(<3>)
--e = a:b
--a = {3,5,6,7,9}
--b = {{true},{false}}
--b = {{1},{true},{false,true}}
--a	= (3,{t},6,7,True)
--a = <3>
--b = ({<3>},True,(test))
--b = (3,(3))
--b = ((3,(true,false)),(3),{(true,false)},<1..3>)
--a = c?x:{z | z <- {1,2}}!((Y.0),true)?r:{z | z <- {1..10}, z%2==0}
--a = show((1,2,(3),4),2,{True},(1,2,(3),4))
--a = error("Dies ist ein Test")
--a	= length({1,2,3})
--a = Seq({3})
--a = seq({True},{})
--a = set(<{1,2},{3}>)
--a = concat(<<3>,<2>>)
--a = tail(<3>)
--a = head(<True>)
--a = Set({True, False})
--a = <5>4<3><><<<2>,<3>>>	ungültig
--a = <5>4<True><<3<4>False> 	ungültig
--b = <> == <>
--b = <5 < 3>
--a = ichbineintestwort > undichauch
--a = <> > <>
--a = «5£4€3£«»€««2»,«3»»»
--a = <5<<3><<4>><5>,<5>>
--a = <3><<4>><5>
--a = <<3,4>>
--a =«5€«3£««4»»€5»,«5»»
--a =«5€«3»€«4»£«5»,«5»»
--datatype Z = K.X.({2},{True}).{1..99}
--datatype J = U.({4..6})
datatype X = Y.{3..}|O.X.{2..4}
channel c,d: X.{1..3}
G = c.Y.9.3
W = member(c,d)
X = let f(y) = y+par within {f(x)..f(x+1)}
		