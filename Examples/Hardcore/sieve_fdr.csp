-- CSP(LP) Code for Eratosthenes' Sieve
--   patterned after, but slightly diffrent from,
--    the Bell Labs bench suite from Doron Peled
--    Y.S.R., 23 Dec 96.
--	Parameterized and adapted for XL, C.R., June 98.
--	Parameterized and adapted for CSP(LP), Michael Leuschel, March 01.
--	Parameterized and adapted for FDR, Michael Leuschel, July 03.

ChData = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38}

channel right, left, gen, t1: ChData

channel temp: ChData.ChData

channel filtered,prime: ChData

channel finished_generating, error, finished_consuming

-- ==========================

Generator(cur,max) =
   right!cur ->
    (if (cur < (max+1)) then
                     Generator((cur+1),max)
                  else
                     finished_generating->STOP
     )

-- ==========================

Unit = left?P -> Filter(P)

Filter(P) = left?N ->
        -- (let M = (N %P) in
         (if (P>0 and ((N % P)==0)) then
            (filtered!N-> Filter(P))
          else
             (prime!N->(right!N -> Filter(P))))
        -- )


-- ==========================

-- N is the number of primes to be consumed

Consumer(N,Max) = 
       left?X ->
          --(let N1 = (N-1) in
           (if ((N-1)>0) then
              Consumer((N-1),Max)
           else
              (if (X==Max) then
                 (finished_consuming->STOP)
               else
                 (error->STOP)
               )
           )
        -- )


-- ==========================

Medium = left?X -> (right!X -> Medium)

Buf_filter = 
      Medium [ right <-> left ] Unit

--      ((Medium [[  right <- temp  ]])
--         [| {| temp | } |]
--       (Unit [[ left <- temp ]])   )

-- ==========================

Units(NFILTER) =
   (if (NFILTER > 1) then
         (  (Unit [[ right<-temp.NFILTER ]])
             [|  {|temp.NFILTER|} |]
            (Units((NFILTER-1)) [[ left<-temp.NFILTER ]] )
         )
   else
       Unit
   )

-- Alternative Def:
-- Units(NFILTER) = if (NFILTER<2) Unit else Unit [ right <-> left ] Units(NFILTER-1)
-- or use replicated linked parallel

-- ==========================

Sieve(NFILTER,NOVER,MAX) =
    (Generator(2,MAX) [ right <-> left ]
      (Units(NFILTER)
         [ right <-> left]
       Consumer(NOVER,MAX))
    )
--    (((Generator(2,MAX) [[ right<-gen ]])
--     [| {| gen| } |]
--    (Units(NFILTER) [[ left<-gen, right<-cons ]]))
--      [| {| cons |} |]
--    (Consumer(NOVER,MAX) [[ left<-cons ]]))


-- ==========================


S1 = (Generator(2,9) [ right<->left ]
        (Buf_filter [ right <-> left ]
          (Medium [ right <-> left] Consumer(4,9) )
        )
     )


S2 = (Generator(2,23) [ right<->left ]
        (Buf_filter [ right <-> left ]
          (Medium [ right <-> left] Consumer(8,23) )
        )
     )

S3 = (Generator(2,37) [ right<->left ]
        (Buf_filter [ right <-> left ]
          (Medium [ right <-> left] Consumer(15,37) )
        )
     )

--(((Generator(2,9) [[ right<-gen ]])
--     [| {| gen |} |]
--    ((Buf_filter [[ left<-gen, right<-t1 ]]))
--       [| {| t1 |} |]
--     (Medium [[ left<-t1, right<-cons ]]))
--    [| {| cons |} |]
--    (Consumer(4,9) [[ left<-cons ]]))

-- ==========================

MAIN = S1
-- MAIN = (Generator(2,9) [[ {right<-gen} ]]);
-- MAIN = (Consumer(4,9) [[ {left<-cons} ]]));
--MAIN = (Generator(2,9)
--     [| {| gen| } |]
 --      Buf_filter); 

Tester0 = Tester(0)
Sieve449 = Sieve(4,4,9)
Units2 = Units(2)
Unit2R = Unit [[ right<-temp.2 ]]
Unit2L = Unit [[ left<-temp.2 ]]
Unit2 = Unit2R [| {| temp.2 |} |] Unit2L
Comp1 = Sieve(4,4,9) [| {| prime |} |] Tester(0)
Comp2 = Sieve(10,10,19) [| {| prime |} |] Tester(0)
Comp3 = Sieve(17,38,38) [| {| prime |} |] Tester(0)   -- failes to compile ISM with FDR !

LivelockTest1 = Comp1 \ {|finished|}
LivelockTest2 = Comp2 \ {|finished|}
LivelockTest3 = Comp3 \ {|finished|}



channel finished

Tester(x) = if (x==31) then finished->Tester(x) else prime?y->Tester(y)

Finish = finished -> STOP


assert not Finish [T= (Comp1 \ {| prime, filtered,
                              finished_generating, finished_consuming |})
assert not (Comp1 \ {| prime,filtered, 
           finished_generating,finished_consuming |}) [T= Finish
assert not (Comp2 \ {| prime,filtered, 
          finished_generating,finished_consuming |}) [T= Finish
-- assert not (Comp3 \ {| prime,filtered, 
--          finished_generating,finished_consuming |}) [T= Finish  -- fails to compile ISM with FDR

-- Trace Check Generated by ProB:
PROB_TEST_TRACE = prime.3 -> filtered.4 -> prime.5 -> filtered.6 -> prime.7 -> filtered.8 -> finished_generating -> prime.9 -> filtered.10 -> finished_consuming -> STOP

assert MAIN [T= PROB_TEST_TRACE




--These assertions are automatically added by the ProCSP tool on Tue Nov 08 20:17:24 CET 2011.--

assert not MAIN :[ deadlock free [F] ]

--End of the automatically added assertions.--
